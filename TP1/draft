Telco

Es una compañia que se dedica a comunicar las ciudades que se susbcriben a su servicio.
Primero las ingresa al mapa de la región. 
Luego establece vínculos entre ellas de cierta calidad y capacidad.
Finalmente establece canales que conectan distintas ciudades ocupando una unidad de 
capacidad por cada enlace recorrido.

Para sostener este modelo se cuenta con las siguientes entidades:

module Point ( Point, newP, difP )
   where

data Point = Point Int Int 
   deriving (Eq, Show)

newP :: Int -> Int -> Point
newP x y = Point x y
difP :: Point -> Point -> Float  -- distancia absoluta
difP (Point a b) (Point c d) = sqrt((a-c)**2 + (b-d)**2)
-----------------
module City ( City, newC, nameC, distanceC )
   where

data City = City String Point 
   deriving (Eq, Show)

newC :: String -> Point -> City
newC name coords = City name coords
nameC :: City -> String
nameC (City name coords) = name
distanceC :: City -> City -> Float
distanceC (City name1 coords1) (City name2 coords2) = difP (coords1) (coords2)
-----------------
module Quality ( Quality, newQ, capacityQ, delayQ )
   where

data Quality = Quality String Int Float 
   deriving (Eq, Show)

newQ :: String -> Int -> Float -> Quality
newQ nombre cantidad demora = Quality nombre cantidad demora
capacityQ :: Quality -> Int -- cuantos túneles puede tolerar esta conexión
capacityQ (Quality nombre cantidad demora) = cantidad
delayQ :: Quality -> Float  -- la demora por unidad de distancia que sucede en las conexiones de este canal
delayQ (Quality nombre cantidad demora) = demora
-------------------
module Link ( Link, newL, linksL, connectsL, capacityL, delayL )
   where

data Link = Link City City Quality 
   deriving (Eq, Show)

newLink :: City -> City -> Quality -> Link -- genera un link entre dos ciudades distintas
newLink ciudad1 ciudad2 calidad = Link ciudad1 ciudad2 calidad
ispartofLink :: City -> Link -> Bool   -- indica si esta ciudad es parte de este link
ispartofLink (ciudad) (Link ciudad1 ciudad2) | ciudad == ciudad1 = True
                                             | ciudad == ciudad2 = True
                                             | otherwise = False
isLinked :: City -> City -> Link -> Bool -- indica si estas dos ciudades distintas estan conectadas mediante este link
isLinked ciudad1 ciudad2 (Link ciudadX ciudadY) | ciudad1 == ciudadX && ciudad2 == ciudadY = True
                                                | ciudad2 == ciudadX && ciudad1 == ciudadY = True
                                                | otherwise = False
capacityLink :: Link -> Int
capacityLink (Link ciudad1 ciudad2 calidad) = capacityQ calidad
delayLink :: Link -> Float     -- la demora que sufre una conexion en este canal
delayLink (Link ciudad1 ciudad2 calidad) = delayQ calidad
obtenerCalidad :: Link -> Quality
obtenerCalidad (Link ciudad1 ciudad2 calidad) = calidad 
-------------------
module Tunel ( Tunel, newT, connectsT, usesT, delayT )
   where

data Tunel = Tunel [Link] 
   deriving (Eq, Show)

newT :: [Link] -> Tunel
newT linkList = Tunel linkList
connectsT :: City -> City -> Tunel -> Bool -- inidca si este tunel conecta estas dos ciudades distintas
connectsT ciudad1 ciudad2 (Tunel linkList) = | ciudad1 == head linkList && ciudad2 == tail linkList = True
                                             | ciudad2 == head linkList && ciudad1 == tail linkList = True
                                             | otherwise = False
usesT :: Link -> Tunel -> Bool  -- indica si este tunel atraviesa ese link
usesT link (Tunel []) = False
usesT link (Tunel (x:xs)) = | x == link = True
                            | otherwise (usesT link (Tunel (xs)))
delayT :: Tunel -> Float -- la demora que sufre una conexion en este tunel
delayT (Tunel []) = 0
delayT (Tunel [link:linkList]) = delayL link + delayT (Tunel [linkList])

-------------------
module Region ( Region, newR, foundR, linkR, tunelR, pathR, linksForR, connectedR, linkedR, delayR, availableCapacityForR, usedCapacityForR )
   where

data Region = Region [City] [Link] [Tunel]
newR :: Region
newR = Region [] [] []

foundR :: Region -> City -> Region -- agrega una nueva ciudad a la región
foundR (Region cityList linkList tunelList) ciudadProxima = Region (ciudadProxima:cityList) linkList tunelList

linkR :: Region -> City -> City -> Quality -> Region -- enlaza dos ciudades de la región con un enlace de la calidad indicada
linkR (Region cityList linkList tunelList) ciudad1 ciudad2 calidad = Region cityList ((newL ciudad1 ciudad2 calidad):linkList) tunelList

tunelR :: Region -> [City] -> Region -- genera una comunicación entre dos ciudades distintas de la región
tunelR (Region cityList linkList tunelList)

connectedR :: Region -> City -> City -> Bool -- indica si estas dos ciudades estan conectadas por un tunel

linkedR :: Region -> City -> City -> Bool -- indica si estas dos ciudades estan enlazadas

delayR :: Region -> City -> City -> Float -- dadas dos ciudades conectadas, indica la demora

availableCapacityForR :: Region -> City -> City -> Int -- indica la capacidad disponible entre dos ciudades
